{"version":3,"sources":["AppHeader/logo.svg","map.service.js","weather.service.js","useLocalStorageState.js","AppHeader/AppHeader.js","AppForm.js","ForecastIcon.js","ForecastCard.js","Forecast.js","CurrentWeather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","API_TOKEN","BASE_URL","location","a","url","fetch","response","ok","Error","statusText","json","data","lat","lon","API_KEY","DEFAULT_OPTIONS","coord","units","cache","Map","options","isExpired","cacheTime","Math","floor","Date","now","Object","assign","cacheItem","get","current","dt","fetchForecast","forecast","set","useLocalStorageState","key","initialState","useState","storedValue","window","localStorage","getItem","JSON","parse","state","setState","useEffect","setItem","stringify","AppHeader","className","src","logo","alt","AppForm","searchTerm","setSearchTerm","searchRef","React","useRef","onSubmit","event","preventDefault","value","type","defaultValue","ref","ForecastIcon","iconCode","height","width","ForecastCard","timestamp","prediction","Intl","DateTimeFormat","year","month","day","hour","minute","timeZoneName","format","weather","icon","description","Forecast","setType","cards","slice","map","onClick","prevType","CurrentWeather","report","style","padding","App","setLocation","setForecast","getGeolocation","then","getForecast","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.24aa87f5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const API_TOKEN = 'pk.6b301c59042b98b3fd879717a81c2c2f'\nconst BASE_URL = 'https://us1.locationiq.com/v1'\n\nexport async function getGeolocation(location) {\n  const url = `${BASE_URL}/search.php?key=${API_TOKEN}&q=${location}&format=json`\n\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error(response.statusText)\n  }\n  const data = await response.json()\n  return {lat: data[0].lat, lon: data[0].lon}\n}\n","const BASE_URL = 'https://api.openweathermap.org/data/2.5/onecall'\nconst API_KEY = '54fbd5dc57e65051f6052821364fa98e'\nconst DEFAULT_OPTIONS = {\n  coord: {lon: -75.76, lat: 45.35}, // Algonquin College\n  units: 'metric'\n}\nconst cache = new Map()\n\n/**\n * @typedef {Object} APIOptions\n * @property {string} units [metric, imperial, standard]\n * @property {Object} coord Location coordinates\n * @property {number} coord.lon Longitude\n * @property {number} coord.lat Latitude\n */\n\n/**\n * Get the latest weather forecast for the given location.\n * Results are cached for 10 minutes.\n * @param {APIOptions} options\n * @returns {Object} Forecast results\n * @see https://openweathermap.org/api/one-call-api#data\n */\nexport async function getForecast(options) {\n  const {coord, units} = Object.assign({}, DEFAULT_OPTIONS, options)\n  const cacheItem = cache.get(coord)\n  if (cacheItem && !isExpired(cacheItem.current.dt)) {\n    return cacheItem\n  }\n  const forecast = await fetchForecast({units, coord})\n  cache.set(coord, forecast)\n  return forecast\n\n  /**\n   * Helper function to check cache expiry\n   * @param {number} cacheTime UNIX timestamp in seconds\n   */\n  function isExpired(cacheTime) {\n    const TEN_MINUTES = 600 // seconds\n    const currentTime = Math.floor(Date.now() / 1000) // convert from ms to s\n    const elapsedTime = currentTime - cacheTime\n    return elapsedTime > TEN_MINUTES\n  }\n}\n\n/**\n * Private function to make the actual `fetch()` call to the API\n * @param {APIOptions} options\n */\nasync function fetchForecast({coord: {lat, lon}, units}) {\n  const url = `${BASE_URL}?lat=${lat}&lon=${lon}&units=${units}&appid=${API_KEY}`\n  const response = await fetch(url)\n  if (!response.ok) throw new Error(response.statusText)\n  return response.json()\n}\n\n/**\n * Returns an <img> HTMLElement with the correct URL to display\n * the OpenWeather image cooresponding to the given `iconCode`.\n * @param {string} iconCode\n */\nexport function createWeatherIcon(iconCode) {\n  let img = document.createElement('img')\n  img.setAttribute(\n    'src',\n    'https://openweathermap.org/img/w/' + iconCode + '.png'\n  )\n  img.setAttribute('alt', '')\n  return img\n}\n","// eslint-disable-next-line no-unused-vars\nimport React, { useState, useEffect } from 'react'\n\nexport default function useLocalStorageState (key, initialState) {\n  const [state, setState] = useState(() => {\n    const storedValue = window.localStorage.getItem(key)\n    return storedValue ? JSON.parse(storedValue) : initialState\n  })\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state))\n  }, [key, state])\n\n  return [state, setState]\n}\n","import React from 'react'\nimport logo from './logo.svg'\nimport './AppHeader.css'\n\nfunction AppHeader() {\n  return (\n    <header className=\"App-header\">\n      <img src={logo} className=\"App-logo\" alt=\"React logo\" />\n      <h1>React Weather</h1>\n    </header>\n  )\n}\n\nexport default AppHeader\n","import React from 'react'\n\nfunction AppForm ({ searchTerm, setSearchTerm }) {\n  const searchRef = React.useRef()\n\n  function handleSubmit (event) {\n    event.preventDefault()\n    setSearchTerm(searchRef.current.value)\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type='text' defaultValue={searchTerm} ref={searchRef} />\n      <button className='button' type='submit'>\n        Get Forecast\n      </button>\n    </form>\n  )\n}\n\nexport default AppForm\n","import React from 'react'\n\nfunction ForecastIcon ({ iconCode }) {\n  return (\n    <img\n      src={`https://openweathermap.org/img/w/${iconCode}.png`}\n      alt=''\n      height='50'\n      width='50'\n    />\n  )\n}\n\nexport default ForecastIcon\n","import React from 'react'\nimport ForecastIcon from './ForecastIcon'\n\nfunction formatDate (timestamp) {\n  const options = {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    timeZoneName: 'short'\n  }\n  return new Intl.DateTimeFormat('en-CA', options).format(\n    new Date(timestamp * 1000)\n  )\n}\n\nexport default function ForecastCard ({ prediction }) {\n  return (\n    <div className='ForecastCard'>\n      <p>{formatDate(prediction.dt)}</p>\n      <ForecastIcon iconCode={prediction.weather[0].icon} />\n      <span>{prediction.weather[0].description}</span>\n      <pre>{JSON.stringify(prediction, null, 2)}</pre>\n    </div>\n  )\n}\n","import React from 'react'\nimport ForecastCard from './ForecastCard'\nimport './Forecast.css'\n\nfunction Forecast ({ forecast }) {\n  const [type, setType] = React.useState('hourly')\n\n  if (!forecast[type]) return null\n\n  const cards = forecast[type]\n    .slice(0, 4)\n    .map(prediction => (\n      <ForecastCard key={prediction.dt} prediction={prediction} />\n    ))\n\n  function toggleType () {\n    setType(prevType => (prevType === 'hourly' ? 'daily' : 'hourly'))\n  }\n\n  return (\n    <section className='Forecast'>\n      <header>\n        <h2>{type} Forecast</h2>\n        <button className='button' onClick={toggleType}>\n          Show {type === 'hourly' ? 'daily' : 'hourly'}\n        </button>\n      </header>\n      <div className='card-container'>{cards}</div>\n    </section>\n  )\n}\n\nexport default Forecast\n","import React from 'react'\n\nfunction CurrentWeather ({ report }) {\n  return (\n    <section style={{ padding: '1rem' }}>\n      <h2>Current Weather</h2>\n      <pre>{JSON.stringify(report, null, 2)}</pre>\n    </section>\n  )\n}\n\nexport default CurrentWeather\n","import React, { useEffect } from 'react'\nimport { getGeolocation } from './map.service'\nimport { getForecast } from './weather.service'\nimport useLocalStorageState from './useLocalStorageState'\nimport AppHeader from './AppHeader/AppHeader'\nimport AppForm from './AppForm'\nimport Forecast from './Forecast'\nimport './App.css'\nimport CurrentWeather from './CurrentWeather'\n\nfunction App () {\n  const [searchTerm, setSearchTerm] = useLocalStorageState(\n    'weather:search',\n    'Kanata, ON, CA'\n  )\n  const [location, setLocation] = useLocalStorageState('weather:location', {\n    lat: 0,\n    lon: 0\n  })\n  const [forecast, setForecast] = useLocalStorageState('weather:forecast', {})\n\n  useEffect(() => {\n    getGeolocation(searchTerm).then(setLocation)\n  }, [searchTerm, setLocation])\n\n  useEffect(() => {\n    getForecast({ coord: location }).then(setForecast)\n  }, [location, setForecast])\n\n  return (\n    <div className='App'>\n      <AppHeader />\n      <AppForm searchTerm={searchTerm} setSearchTerm={setSearchTerm} />\n      <CurrentWeather report={forecast.current} />\n      <Forecast forecast={forecast} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}